from binascii import unhexlify
from primes import nextPrime

def dec(y, d, n):
    int_y = int.from_bytes(unhexlify(y), "little")
    x = pow(int_y,d,n)
    return x.to_bytes(256, 'little')

# public key
e = 65537
n = 359538626972463181545861038157804946723595395788461314546860162315465351611001926265416954644815072042240227759742786715317579537628833244985694861278987734749889467798189216056224155419337614971247810502667407426128061959753492358794507740889756004921248165191531797899658797061840615258162959755571367021109

ciphertext = "3334303164633363353339356539353130346566343665363638653537333831323930653036646532336666633036636166396164656265373334636531323430653138623237613166313636343362316661663330643038623331613561633136386261313636373064636633373261633366633436656532636664636335616333303431626334396630306431346462353165643831653065343233653866333933353737636231336266303431353738343835303261663564613638316164623534356165646339663433306435656437313234373064323635656136366130653664626634653838626237313366336638393736363934363636393130313030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030"

# compute the primes
p = initial_p = nextPrime(2 ** 512)
q = nextPrime(2 ** 513)

while True:
	while p * q < n:
		p = nextPrime(p)
		continue
		
	if p * q == n:
		break
		
	q = nextPrime(q)
	p = initial_p # reset p
		
# compute d
d = pow(e, -1, (p - 1) * (q - 1))
		
# decrypt the message
msg = dec(unhexlify(ciphertext), d, n).decode()

# print the message
print(msg)
